#!/usr/bin/env ruby
require 'open-uri'
require 'yaml'

require_relative '../lib/rg_stats/statistic'

class PersistDataBetweenSessions

    HOME_FOLDER = "#{ENV['HOME']}/.rg_stats"
    STORAGE_NAME = "ruby_gems_sync.yaml"
    def self.load
      self.check_home_folder
      File.exists?(self.FILE_NAME) ? File.open(self.FILE_NAME, "r") { |file| YAML.load(file) } : []
    end

    def self.save(list)
      self.check_home_folder
      File.open(self.FILE_NAME, "w") {|file| file.puts(list.to_yaml) }
    end

    def self.check_home_folder
      Dir::mkdir(HOME_FOLDER) unless File.exists?(HOME_FOLDER) 
    end

    def self.FILE_NAME
      "#{HOME_FOLDER}/#{STORAGE_NAME}"
    end
end

ARGV.each do |user_name|

  if user_name.nil?
    puts ""
    puts "Type username on RubyGems as argument: rg_stats user_name"
    puts ""
    exit
  end

  url =  "https://rubygems.org/api/v1/owners/#{user_name}/gems.json"
  begin
    data_as_json = open(url)
  rescue SocketError => e
    puts "It seems connection is not available. (#{e.message})"
    exit
  rescue OpenURI::HTTPError => e
    puts "User #{user_name} has not been found. (#{e.message})"
    exit
  end
  loaded_data = PersistDataBetweenSessions.load
  if loaded_data.class == Array
    all_data = {}
    all_data[user_name] = loaded_data
  else
    all_data = loaded_data
  end

  old_data =  all_data[user_name].nil? ? [] : all_data[user_name]
  old_map = {} 
  old_data.each do |old_gem_info|
    old_map[old_gem_info[0]] = old_gem_info[1]
  end

  stat = Statistic.new
  stat.load data_as_json

  puts ""
  puts "\e[32m#{user_name}\e[0m"
  puts "-" *(stat.max_gem_name_size + 30)
  stat.gem_infos.each do |gem_info|
    number_of_changes = gem_info[1] - (old_map[gem_info[0]].nil? ? 0 : old_map[gem_info[0]])
    diff_from_last_time = number_of_changes == 0 ? "" : " (+\e[32m#{number_of_changes}\e[0m)"
    puts "%-#{stat.max_gem_name_size + 1}s=> %6d %6s" % [ gem_info[0] , gem_info[1], diff_from_last_time ] 
    puts "-" *(stat.max_gem_name_size + 30)
  end
  all_data[user_name] = stat.gem_infos
  puts ""
  PersistDataBetweenSessions.save(all_data)

end
